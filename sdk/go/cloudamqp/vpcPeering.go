// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudamqp

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type VpcPeering struct {
	s *pulumi.ResourceState
}

// NewVpcPeering registers a new resource with the given unique name, arguments, and options.
func NewVpcPeering(ctx *pulumi.Context,
	name string, args *VpcPeeringArgs, opts ...pulumi.ResourceOpt) (*VpcPeering, error) {
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	if args == nil || args.PeeringId == nil {
		return nil, errors.New("missing required argument 'PeeringId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["instanceId"] = nil
		inputs["peeringId"] = nil
	} else {
		inputs["instanceId"] = args.InstanceId
		inputs["peeringId"] = args.PeeringId
	}
	inputs["status"] = nil
	s, err := ctx.RegisterResource("cloudamqp:index/vpcPeering:VpcPeering", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VpcPeering{s: s}, nil
}

// GetVpcPeering gets an existing VpcPeering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpcPeering(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VpcPeeringState, opts ...pulumi.ResourceOpt) (*VpcPeering, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["instanceId"] = state.InstanceId
		inputs["peeringId"] = state.PeeringId
		inputs["status"] = state.Status
	}
	s, err := ctx.ReadResource("cloudamqp:index/vpcPeering:VpcPeering", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &VpcPeering{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *VpcPeering) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *VpcPeering) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Instance identifier
func (r *VpcPeering) InstanceId() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["instanceId"])
}

// VPC peering identifier
func (r *VpcPeering) PeeringId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["peeringId"])
}

// VPC peering status
func (r *VpcPeering) Status() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["status"])
}

// Input properties used for looking up and filtering VpcPeering resources.
type VpcPeeringState struct {
	// Instance identifier
	InstanceId interface{}
	// VPC peering identifier
	PeeringId interface{}
	// VPC peering status
	Status interface{}
}

// The set of arguments for constructing a VpcPeering resource.
type VpcPeeringArgs struct {
	// Instance identifier
	InstanceId interface{}
	// VPC peering identifier
	PeeringId interface{}
}
