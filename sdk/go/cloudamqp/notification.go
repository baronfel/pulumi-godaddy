// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudamqp

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Notification struct {
	s *pulumi.ResourceState
}

// NewNotification registers a new resource with the given unique name, arguments, and options.
func NewNotification(ctx *pulumi.Context,
	name string, args *NotificationArgs, opts ...pulumi.ResourceOpt) (*Notification, error) {
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	if args == nil || args.Value == nil {
		return nil, errors.New("missing required argument 'Value'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["instanceId"] = nil
		inputs["type"] = nil
		inputs["value"] = nil
	} else {
		inputs["instanceId"] = args.InstanceId
		inputs["type"] = args.Type
		inputs["value"] = args.Value
	}
	s, err := ctx.RegisterResource("cloudamqp:index/notification:Notification", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Notification{s: s}, nil
}

// GetNotification gets an existing Notification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotification(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NotificationState, opts ...pulumi.ResourceOpt) (*Notification, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["instanceId"] = state.InstanceId
		inputs["type"] = state.Type
		inputs["value"] = state.Value
	}
	s, err := ctx.ReadResource("cloudamqp:index/notification:Notification", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Notification{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Notification) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Notification) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Instance identifier
func (r *Notification) InstanceId() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["instanceId"])
}

// Type of the notification, valid options are: email, webhook, pagerduty, victorops, opsgenie, opsgenie-eu, slack
func (r *Notification) Type() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["type"])
}

// Notification endpoint, where to send the notifcation
func (r *Notification) Value() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["value"])
}

// Input properties used for looking up and filtering Notification resources.
type NotificationState struct {
	// Instance identifier
	InstanceId interface{}
	// Type of the notification, valid options are: email, webhook, pagerduty, victorops, opsgenie, opsgenie-eu, slack
	Type interface{}
	// Notification endpoint, where to send the notifcation
	Value interface{}
}

// The set of arguments for constructing a Notification resource.
type NotificationArgs struct {
	// Instance identifier
	InstanceId interface{}
	// Type of the notification, valid options are: email, webhook, pagerduty, victorops, opsgenie, opsgenie-eu, slack
	Type interface{}
	// Notification endpoint, where to send the notifcation
	Value interface{}
}
