// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package cloudamqp

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Alarm struct {
	s *pulumi.ResourceState
}

// NewAlarm registers a new resource with the given unique name, arguments, and options.
func NewAlarm(ctx *pulumi.Context,
	name string, args *AlarmArgs, opts ...pulumi.ResourceOpt) (*Alarm, error) {
	if args == nil || args.InstanceId == nil {
		return nil, errors.New("missing required argument 'InstanceId'")
	}
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["instanceId"] = nil
		inputs["notificationIds"] = nil
		inputs["queueRegex"] = nil
		inputs["timeThreshold"] = nil
		inputs["type"] = nil
		inputs["valueThreshold"] = nil
		inputs["vhostRegex"] = nil
	} else {
		inputs["instanceId"] = args.InstanceId
		inputs["notificationIds"] = args.NotificationIds
		inputs["queueRegex"] = args.QueueRegex
		inputs["timeThreshold"] = args.TimeThreshold
		inputs["type"] = args.Type
		inputs["valueThreshold"] = args.ValueThreshold
		inputs["vhostRegex"] = args.VhostRegex
	}
	s, err := ctx.RegisterResource("cloudamqp:index/alarm:Alarm", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Alarm{s: s}, nil
}

// GetAlarm gets an existing Alarm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlarm(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AlarmState, opts ...pulumi.ResourceOpt) (*Alarm, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["instanceId"] = state.InstanceId
		inputs["notificationIds"] = state.NotificationIds
		inputs["queueRegex"] = state.QueueRegex
		inputs["timeThreshold"] = state.TimeThreshold
		inputs["type"] = state.Type
		inputs["valueThreshold"] = state.ValueThreshold
		inputs["vhostRegex"] = state.VhostRegex
	}
	s, err := ctx.ReadResource("cloudamqp:index/alarm:Alarm", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Alarm{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Alarm) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Alarm) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Instance identifier
func (r *Alarm) InstanceId() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["instanceId"])
}

// Identifiers for recipients to be notified. Leave empty to notifiy all recipients.
func (r *Alarm) NotificationIds() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["notificationIds"])
}

// Regex for which queues to check
func (r *Alarm) QueueRegex() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["queueRegex"])
}

// For how long (in seconds) the value_threshold should be active before trigger alarm
func (r *Alarm) TimeThreshold() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["timeThreshold"])
}

// Type of the alarm, valid options are: cpu, memory, disk_usage, queue_length, connection_count, consumers_count,
// net_split
func (r *Alarm) Type() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["type"])
}

// What value to trigger the alarm for
func (r *Alarm) ValueThreshold() pulumi.IntOutput {
	return (pulumi.IntOutput)(r.s.State["valueThreshold"])
}

// Regex for which vhost the queues are in
func (r *Alarm) VhostRegex() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["vhostRegex"])
}

// Input properties used for looking up and filtering Alarm resources.
type AlarmState struct {
	// Instance identifier
	InstanceId interface{}
	// Identifiers for recipients to be notified. Leave empty to notifiy all recipients.
	NotificationIds interface{}
	// Regex for which queues to check
	QueueRegex interface{}
	// For how long (in seconds) the value_threshold should be active before trigger alarm
	TimeThreshold interface{}
	// Type of the alarm, valid options are: cpu, memory, disk_usage, queue_length, connection_count, consumers_count,
	// net_split
	Type interface{}
	// What value to trigger the alarm for
	ValueThreshold interface{}
	// Regex for which vhost the queues are in
	VhostRegex interface{}
}

// The set of arguments for constructing a Alarm resource.
type AlarmArgs struct {
	// Instance identifier
	InstanceId interface{}
	// Identifiers for recipients to be notified. Leave empty to notifiy all recipients.
	NotificationIds interface{}
	// Regex for which queues to check
	QueueRegex interface{}
	// For how long (in seconds) the value_threshold should be active before trigger alarm
	TimeThreshold interface{}
	// Type of the alarm, valid options are: cpu, memory, disk_usage, queue_length, connection_count, consumers_count,
	// net_split
	Type interface{}
	// What value to trigger the alarm for
	ValueThreshold interface{}
	// Regex for which vhost the queues are in
	VhostRegex interface{}
}
